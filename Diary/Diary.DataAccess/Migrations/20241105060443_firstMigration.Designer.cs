// <auto-generated />
using System;
using Diary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Diary.DataAccess.Migrations
{
    [DbContext(typeof(EfDbContext))]
    [Migration("20241105060443_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Diary.Core.Domain.Administration.JournalOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("JournalOwnerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Diary.Core.Domain.UserJournals.Journal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("JournalId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("JournalOwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JournalOwnerId");

                    b.ToTable("UserJournals");
                });

            modelBuilder.Entity("Diary.Core.Domain.UserJournals.JournalLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("JournalLineId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("RelatedEntityType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("UserJournalLines");
                });

            modelBuilder.Entity("Diary.Core.Domain.UserJournals.Journal", b =>
                {
                    b.HasOne("Diary.Core.Domain.Administration.JournalOwner", "JournalOwner")
                        .WithMany("Journals")
                        .HasForeignKey("JournalOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalOwner");
                });

            modelBuilder.Entity("Diary.Core.Domain.UserJournals.JournalLine", b =>
                {
                    b.HasOne("Diary.Core.Domain.UserJournals.Journal", "Journal")
                        .WithMany("JournalLines")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Diary.Core.Domain.Administration.JournalOwner", b =>
                {
                    b.Navigation("Journals");
                });

            modelBuilder.Entity("Diary.Core.Domain.UserJournals.Journal", b =>
                {
                    b.Navigation("JournalLines");
                });
#pragma warning restore 612, 618
        }
    }
}
